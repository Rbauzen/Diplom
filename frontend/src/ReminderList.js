// frontend/src/ReminderList.js
import React, { useState, useEffect } from 'react';
import { fetchReminders, deleteReminder as apiDeleteReminder, fetchMedicines } from './services/api';
import { useProtocol } from './contexts/ProtocolContext';
import { usePharmacy } from './contexts/PharmacyContext';
import './ReminderList.css';

function ReminderList({
    onAddReminder,
    onEditReminder,
    medicineIdFilter = null, 
    refreshKey 
}) {
    const [reminders, setReminders] = useState([]);
    const [medicinesMap, setMedicinesMap] = useState({});
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const { currentProtocol } = useProtocol();
    const { pharmacyId, isLoadingPharmacyId } = usePharmacy();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    useEffect(() => {
        if (isLoadingPharmacyId || !pharmacyId) {
            return;
        }

        fetchMedicines(currentProtocol, pharmacyId)
            .then(data => {
                const medsMap = (data || []).reduce((acc, med) => {
                    acc[med.id] = med.name;
                    return acc;
                }, {});
                setMedicinesMap(medsMap);
            })
            .catch(err => {
                console.error("ReminderList: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –ª–µ–∫–∞—Ä—Å—Ç–≤:", err.message);
            });
    }, [currentProtocol, pharmacyId, isLoadingPharmacyId]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–º–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    useEffect(() => {
        if (isLoadingPharmacyId) {
            setLoading(true);
            setReminders([]); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            return;
        }

        if (!pharmacyId) {
            setReminders([]);
            setLoading(false);
            setError(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
            return;
        }

        setLoading(true);
        setError(null);
        
        fetchReminders(currentProtocol, pharmacyId, medicineIdFilter)
            .then(data => {
                setReminders(data || []);
            })
            .catch(err => {
                console.error("ReminderList: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", err.message);
                const errorMsg = err.response?.data?.error || err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.';
                setError(errorMsg);
            })
            .finally(() => {
                setLoading(false);
            });
    }, [refreshKey, currentProtocol, pharmacyId, medicineIdFilter, isLoadingPharmacyId]);

    const handleDelete = async (reminderId) => {
        if (!pharmacyId) {
            setError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å: ID –∞–ø—Ç–µ—á–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.");
            console.error("ReminderList handleDelete: pharmacyId is missing.");
            return;
        }
        if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?`)) {
            try {
                await apiDeleteReminder(reminderId, currentProtocol, pharmacyId);
                setReminders(prevReminders => prevReminders.filter(r => r.id !== reminderId));
            } catch (err) {
                console.error("ReminderList: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", err.message);
                setError(err.response?.data?.error || err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.');
            }
        }
    };

    const formatDaysOfWeek = (daysString) => {
        if (!daysString || daysString.trim() === '') return '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ)';
        const dayMap = { '1': '–ü–Ω', '2': '–í—Ç', '3': '–°—Ä', '4': '–ß—Ç', '5': '–ü—Ç', '6': '–°–±', '7': '–í—Å' };
        const days = daysString.split(',').map(d => dayMap[d.trim()] || d.trim()).filter(Boolean); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ—Å–ª–µ trim, –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–±–µ–ª—ã
        return days.length > 0 ? days.join(', ') : '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ)';
    };

    if (isLoadingPharmacyId) {
        return <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ø—Ç–µ—á–∫–µ...</p>;
    }
    if (!pharmacyId) {
        return <p>–ê–ø—Ç–µ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∞–ø—Ç–µ—á–∫—É.</p>;
    }
    if (loading) {
        return <p>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ({currentProtocol.toUpperCase()})...</p>;
    }
    if (error) {
        return <p style={{ color: 'red' }}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {error}</p>;
    }

    return (
        <div className="reminder-list-container">
            <div className="reminder-list-header">
                <h2>{medicineIdFilter ? `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è "${medicinesMap[medicineIdFilter] || `–ª–µ–∫–∞—Ä—Å—Ç–≤–∞ ID ${medicineIdFilter}`}"` : "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"}</h2>
                {onAddReminder && !medicineIdFilter && (
                     <button onClick={onAddReminder} className="add-reminder-btn">
                        + –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    </button>
                )}
            </div>

            {reminders.length === 0 ? (
                <p>{medicineIdFilter ? '–î–ª—è —ç—Ç–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.' : '–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.'}</p>
            ) : (
                <ul className="reminders">
                    {reminders.map(reminder => (
                        <li key={reminder.id} className={`reminder-item ${!reminder.is_active ? 'inactive' : ''}`}>
                            <div className="reminder-info">
                                <span className="reminder-medicine">
                                    <strong>{medicinesMap[reminder.medicine_id] || `–õ–µ–∫–∞—Ä—Å—Ç–≤–æ ID: ${reminder.medicine_id}`}</strong>
                                </span>
                                <span className="reminder-time">
                                    –í—Ä–µ–º—è: {reminder.reminder_time ? reminder.reminder_time.substring(0,5) : 'N/A'}
                                </span>
                                <span className="reminder-days">
                                    –î–Ω–∏: {formatDaysOfWeek(reminder.days_of_week)}
                                </span>
                                <span className="reminder-dates">
                                    C {reminder.start_date ? new Date(reminder.start_date).toLocaleDateString() : 'N/A'}
                                    {reminder.end_date ? ` –ø–æ ${new Date(reminder.end_date).toLocaleDateString()}` : ''}
                                </span>
                                {reminder.notes && <span className="reminder-notes">–ó–∞–º–µ—Ç–∫–∞: <em>{reminder.notes}</em></span>}
                                {!reminder.is_active && <span className="reminder-status-inactive">(–ù–µ–∞–∫—Ç–∏–≤–Ω–æ)</span>}
                            </div>
                            <div className="reminder-actions">
                                <button onClick={() => onEditReminder(reminder)} title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" className="action-btn edit-btn">‚úèÔ∏è</button>
                                <button onClick={() => handleDelete(reminder.id)} title="–£–¥–∞–ª–∏—Ç—å" className="action-btn delete-btn">üóëÔ∏è</button>
                            </div>
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
}

export default ReminderList;